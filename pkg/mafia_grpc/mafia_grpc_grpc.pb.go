// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/mafia_grpc/mafia_grpc.proto

package mafia_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error)
	Vote(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*Response, error)
	Kill(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*Response, error)
	CheckIfMafia(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*CheckMafiaResponse, error)
	GetState(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*GameState, error)
	CanChat(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*ChatResponse, error)
	Quit(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*Response, error)
	GetNotifications(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (Mafia_GetNotificationsClient, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Vote(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Kill(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) CheckIfMafia(ctx context.Context, in *SetVictimRequest, opts ...grpc.CallOption) (*CheckMafiaResponse, error) {
	out := new(CheckMafiaResponse)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/CheckIfMafia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) GetState(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*GameState, error) {
	out := new(GameState)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) CanChat(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/CanChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Quit(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mafia_grpc.Mafia/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) GetNotifications(ctx context.Context, in *PlayerInfo, opts ...grpc.CallOption) (Mafia_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/mafia_grpc.Mafia/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_GetNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type mafiaGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *mafiaGetNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Join(context.Context, *JoinRequest) (*Response, error)
	Vote(context.Context, *SetVictimRequest) (*Response, error)
	Kill(context.Context, *SetVictimRequest) (*Response, error)
	CheckIfMafia(context.Context, *SetVictimRequest) (*CheckMafiaResponse, error)
	GetState(context.Context, *PlayerInfo) (*GameState, error)
	CanChat(context.Context, *PlayerInfo) (*ChatResponse, error)
	Quit(context.Context, *PlayerInfo) (*Response, error)
	GetNotifications(*PlayerInfo, Mafia_GetNotificationsServer) error
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Join(context.Context, *JoinRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMafiaServer) Vote(context.Context, *SetVictimRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedMafiaServer) Kill(context.Context, *SetVictimRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedMafiaServer) CheckIfMafia(context.Context, *SetVictimRequest) (*CheckMafiaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfMafia not implemented")
}
func (UnimplementedMafiaServer) GetState(context.Context, *PlayerInfo) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMafiaServer) CanChat(context.Context, *PlayerInfo) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanChat not implemented")
}
func (UnimplementedMafiaServer) Quit(context.Context, *PlayerInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedMafiaServer) GetNotifications(*PlayerInfo, Mafia_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVictimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Vote(ctx, req.(*SetVictimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVictimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Kill(ctx, req.(*SetVictimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_CheckIfMafia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVictimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).CheckIfMafia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/CheckIfMafia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).CheckIfMafia(ctx, req.(*SetVictimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).GetState(ctx, req.(*PlayerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_CanChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).CanChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/CanChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).CanChat(ctx, req.(*PlayerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia_grpc.Mafia/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Quit(ctx, req.(*PlayerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).GetNotifications(m, &mafiaGetNotificationsServer{stream})
}

type Mafia_GetNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type mafiaGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *mafiaGetNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia_grpc.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Mafia_Join_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Mafia_Vote_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Mafia_Kill_Handler,
		},
		{
			MethodName: "CheckIfMafia",
			Handler:    _Mafia_CheckIfMafia_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Mafia_GetState_Handler,
		},
		{
			MethodName: "CanChat",
			Handler:    _Mafia_CanChat_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Mafia_Quit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotifications",
			Handler:       _Mafia_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/mafia_grpc/mafia_grpc.proto",
}
